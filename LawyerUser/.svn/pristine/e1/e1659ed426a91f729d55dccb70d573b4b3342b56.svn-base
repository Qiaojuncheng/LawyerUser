//
//  AppDelegate.m
//  Lawyer
//
//  Created by MYMAc on 2017/4/10.
//  Copyright © 2017年 ShangYu. All rights reserved.
//


#import "AppDelegate.h"
#import "MtabBatrC.h"
#import "IQKeyboardManager.h"
#import <BaiduMapAPI_Base/BMKMapManager.h>
#import "GuideViewController.h"
#import "QJLoginViewController.h"
 
#import <BaiduMapAPI_Map/BMKMapView.h>
#import <BaiduMapAPI_Location/BMKLocationService.h>

#import <AudioToolbox/AudioServices.h>
#import <AudioToolbox/AudioToolbox.h>
#import "WXApi.h"
#import <StoreKit/StoreKit.h>

// 引入JPush功能所需头文件
#import "JPUSHService.h"

static SystemSoundID shake_sound_male_id = 0;

// iOS10注册APNs所需头文件
#ifdef NSFoundationVersionNumber_iOS_9_x_Max
#import <UserNotifications/UserNotifications.h>
#endif


 @interface AppDelegate ()<JPUSHRegisterDelegate,BMKMapViewDelegate,BMKLocationServiceDelegate,JPUSHRegisterDelegate,WXApiDelegate,SKPaymentTransactionObserver,SKProductsRequestDelegate>{
  
     BMKMapManager* _mapManager;
     
    
     BMKLocationService * _locServiece;
     
     NSUserDefaults * UserDefaults;

}

@end

@implementation AppDelegate
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(nullable NSString *)sourceApplication annotation:(id)annotation
{
    
    
    //添加一个交易队列观察者  内购的监听 主要用于 内购成功 后台验证失败， 再次验证
//    [[SKPaymentQueue defaultQueue] addTransactionObserver:self];
    
    
    NSString * urlStr =  [[url absoluteString] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    
    if (self.window) {
        if (![urlStr hasPrefix:@"wx"]) {
          NSString *fileNameStr = [url lastPathComponent];
// 路径
//      wangFile ;
         NSArray *arr = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSAllDomainsMask, YES);
        NSString *path = [arr objectAtIndex:0];
            NSString * CreatPath =[path stringByAppendingPathComponent:@"wangFile"];
        [[NSFileManager defaultManager] createDirectoryAtPath:CreatPath withIntermediateDirectories:YES attributes:nil error:nil];
          NSString *pStr = [CreatPath stringByAppendingPathComponent:fileNameStr];
          NSLog(@"%@",pStr);
            NSData *data = [[NSData alloc]initWithContentsOfURL:url];
         BOOL isBol =   [data writeToFile:pStr atomically:YES];
  //        BOOL isBol   =  [strings writeToFile:pStr atomically:YES encoding:NSUTF8StringEncoding error:&errror];
            if (isBol) {
                NSLog(@"yes");
            }else{
                NSLog(@"no");
            }
            
            // NSLog(@"文件已存到本地文件夹内 patch = %@",Doc);
        }
    }
        //6.3的新的API调用，是为了兼容国外平台(例如:新版facebookSDK,VK等)的调用[如果用6.2的api调用会没有回调],对国内平台没有影响
    BOOL result = [[UMSocialManager defaultManager] handleOpenURL:url sourceApplication:sourceApplication annotation:annotation];
    if (!result) {
        // 其他如支付等SDK的回调
        if ([urlStr hasPrefix:@"wx"]) {
            return  [WXApi handleOpenURL:url delegate:self];
         }
     }
    return result;

    
    //return YES;
    
    
}
-(void)onResp:(BaseResp *)resp{
         [[NSNotificationCenter defaultCenter]postNotificationName:@"PAYSTATUE" object:resp];
 
}


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {

    UserDefaults =[NSUserDefaults standardUserDefaults];
    
    NSString * SoundsStr = [UserDefaults  objectForKey:@"Sounds"];
 
    if(SoundsStr == nil){
        [UserDefaults  setObject:@"YES" forKey:@"Sounds"];
        [UserDefaults  setObject:@"YES" forKey:@"vibration"];

        [UserDefaults synchronize];
    }
    
    
    //Required
    //notice: 3.0.0及以后版本注册可以这样写，也可以继续用之前的注册方式
    JPUSHRegisterEntity * entity = [[JPUSHRegisterEntity alloc] init];
    entity.types = JPAuthorizationOptionAlert|JPAuthorizationOptionBadge|JPAuthorizationOptionSound;
    if ([[UIDevice currentDevice].systemVersion floatValue] >= 8.0) {
        // 可以添加自定义categories
        // NSSet<UNNotificationCategory *> *categories for iOS10 or later
        // NSSet<UIUserNotificationCategory *> *categories for iOS8 and iOS9
    }
    [JPUSHService registerForRemoteNotificationConfig:entity delegate:self];

    
    // Required
    // init Push
    // notice: 2.1.5版本的SDK新增的注册方法，改成可上报IDFA，如果没有使用IDFA直接传nil
    // 如需继续使用pushConfig.plist文件声明appKey等配置内容，请依旧使用[JPUSHService setupWithOption:launchOptions]方式初始化。
    [JPUSHService setupWithOption:launchOptions appKey:@"4f8d107be387cc5ed6c54302"
                          channel:@"xiazeidizhi"
                 apsForProduction:NO];//0 (默认值)表示采用的是开发证书，1 表示采用生产证书发布应用。
    
    
    NSNotificationCenter *defaultCenter = [NSNotificationCenter defaultCenter];
    [defaultCenter addObserver:self selector:@selector(networkDidReceiveMessage:) name:kJPFNetworkDidReceiveMessageNotification object:nil];
    
//     登录状态改变， 更新alisa 别名
    [defaultCenter addObserver:self selector:@selector(setalias) name:KNOTIFICATION_LOGINSUCCESS object:nil];

    
    /* 打开调试日志 */
    [[UMSocialManager defaultManager] openLog:YES];
    
    /* 设置友盟appkey */
    [[UMSocialManager defaultManager] setUmSocialAppkey:@"59e58f2ccae7e77537000a8b"];
    
    [self configUSharePlatforms];
    
    [self confitUShareSettings];
    
    
    
    
    //关闭设置为NO, 默认值为NO.
     [IQKeyboardManager sharedManager].enable = YES;
    //点击背景收起键盘
    [IQKeyboardManager sharedManager].shouldResignOnTouchOutside = YES;
    [IQKeyboardManager sharedManager].enableAutoToolbar = YES;

    
     _mapManager = [[BMKMapManager alloc]init];
    // 如果要关注网络及授权验证事件，请设定     generalDelegate参数
    BOOL ret = [_mapManager start:@"DdARvxd0fwqdDFd7epAnNkcIKURhfyEN"  generalDelegate:nil];
    if (!ret) {
        NSLog(@"manager start failed!");
    }
    
    
    _locServiece = [[BMKLocationService alloc]init];
    _locServiece.delegate = self;
    [_locServiece startUserLocationService];
    
    //注册登录状态监听
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(loginStateChange:)
                                                 name:KNOTIFICATION_LOGINSUCCESS
                                               object:nil];

#pragma    mark   判断是不是 第一次登陆
    BOOL  isFirst =  YES;
    isFirst =( BOOL )[[NSUserDefaults standardUserDefaults]  boolForKey:@"MMIsFirst"];
    NSLog(@" ++  %d",isFirst);
    
    if (!isFirst) {
        GuideViewController * gvc =[[GuideViewController alloc]init];
        self.window.rootViewController  = gvc;
    }else{
        if ([UserId length] > 0) {
            MtabBatrC *Tab =[[MtabBatrC alloc]init];
            //    UINavigationController *MainNavi =[[UINavigationController alloc]initWithRootViewController:Tab];
            self.window.rootViewController = Tab;

        }else{
            QJLoginViewController *view = [QJLoginViewController new];
           UINavigationController * na= [[UINavigationController alloc]initWithRootViewController:view];
            self.window.rootViewController = na;
        }
 }
        // Override point for customization after application launch.
    return YES;
}

- (void)application:(UIApplication *)application
didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    
    NSLog(@"deviceToken = %@",deviceToken);
    /// Required - 注册 DeviceToken
    [JPUSHService registerDeviceToken:deviceToken];
}

-(void)setalias{
    [JPUSHService setAlias:UserId completion:^(NSInteger iResCode, NSString *iAlias, NSInteger seq) {
        NSLog(@" iResCode = %ld, iAlias = %@  seq = %ld",(long)iResCode,iAlias,(long)seq);
    } seq:[UserId integerValue]];
    [JPUSHService setAlias:UserId completion:nil seq:[UserId integerValue]];
 
}

- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {
    //Optional
    NSLog(@"did Fail To Register For Remote Notifications With Error: %@", error);
}


// iOS 10 Support
- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(NSInteger))completionHandler {
    // Required
    NSDictionary * userInfo = notification.request.content.userInfo;
    if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {
        [JPUSHService handleRemoteNotification:userInfo];
    }
    completionHandler(UNNotificationPresentationOptionAlert); // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以选择设置
    [self NOtificationWithDic:userInfo];

}

// iOS 10 Support
- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler {
    // Required
    NSDictionary * userInfo = response.notification.request.content.userInfo;
    if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {
        [JPUSHService handleRemoteNotification:userInfo];
    }
    completionHandler();  // 系统要求执行这个方法
    [self NOtificationWithDic:userInfo];

}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
    // Required, iOS 7 Support
    [JPUSHService handleRemoteNotification:userInfo];
    completionHandler(UIBackgroundFetchResultNewData);
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
    
    // Required,For systems with less than or equal to iOS6
    [JPUSHService handleRemoteNotification:userInfo];
       NSLog(@"通知进入获取的userInfo = %@",userInfo);
    
    [self NOtificationWithDic:userInfo];

 }
-(void)NOtificationWithDic:(NSDictionary *)userInfo{
    NSString *customizeField1 = [userInfo valueForKey:@"stateNumber"]; //服务端传递的Extras附加字段，key是自己定义的
    //    customizeField1 我的咨询 1 收到回复
    //     我的预约     2 有律师同意   3有律师拒绝  4 有律师点击完成提示去评价
    //     我的需求   5 律师抢单成功   6 律师点完成提示评价
    
    if ([customizeField1 isEqualToString:@"1"])//
    {
        [UserDefaults setValue:@"yes" forKey:@"MyCounsment"];
    }else if ([customizeField1 isEqualToString:@"2"]){
        [UserDefaults setValue:@"yes" forKey:@"MyAppoinment"];
    }else if ([customizeField1 isEqualToString:@"3"]){
        [UserDefaults setValue:@"yes" forKey:@"MyNeeds"];
        
    }
    [UserDefaults synchronize];
    
    [[NSNotificationCenter defaultCenter] postNotificationName:@"UPMINEUI" object:nil];
    

    
}

- (void)networkDidReceiveMessage:(NSNotification *)notification {
    NSDictionary * userInfo = [notification userInfo];
//    NSString *content = [userInfo valueForKey:@"content"];
    NSDictionary *extras = [userInfo valueForKey:@"extras"];
    NSString *customizeField1 = [extras valueForKey:@"stateNumber"]; //服务端传递的Extras附加字段，key是自己定义的
    
//    customizeField1 我的咨询 1 收到回复
//     我的预约     2 有律师同意   3有律师拒绝  4 有律师点击完成提示去评价
//     我的需求   5 律师抢单成功   6 律师点完成提示评价
    
    if ([customizeField1 isEqualToString:@"1"])//
    {
        [UserDefaults setValue:@"yes" forKey:@"MyCounsment"];
    }else if ([customizeField1 isEqualToString:@"2"]){
        [UserDefaults setValue:@"yes" forKey:@"MyAppoinment"];
     }else if ([customizeField1 isEqualToString:@"3"]){
        [UserDefaults setValue:@"yes" forKey:@"MyNeeds"];
    
    }
    [UserDefaults synchronize];
    
    [[NSNotificationCenter defaultCenter] postNotificationName:@"UPMINEUI" object:nil];
  
    [self playSoundAndVibration];
     NSLog(@"自定义消息  = %@",userInfo);
}


- (void)playSoundAndVibration{
    NSTimeInterval timeInterval = [[NSDate date]
                           timeIntervalSinceDate:self.lastPlaySoundDate];
    if (timeInterval < kDefaultPlaySoundInterval) {
        //如果距离上次响铃和震动时间太短, 则跳过响铃
        NSLog(@"skip ringing & vibration %@, %@", [NSDate date], self.lastPlaySoundDate);
        return;
    }
    //保存最后一次响铃时间
    self.lastPlaySoundDate = [NSDate date];
    
    NSString * SoundsStr = [UserDefaults  objectForKey:@"Sounds"];
    NSString * Vibrate  =  [UserDefaults  objectForKey:@"vibration"];
    if ([SoundsStr isEqualToString:@"YES"]) {
        // 收到消息时，播放音频
        [self playNewMessageSound];
    }
    if ([Vibrate isEqualToString:@"YES"]) {
        // 收到消息时，震动
        [self playVibration];
    }
   
}

- (void)confitUShareSettings
{
    /*
     * 打开图片水印
     */
    //[UMSocialGlobal shareInstance].isUsingWaterMark = YES;
    
    /*
     * 关闭强制验证https，可允许http图片分享，但需要在info.plist设置安全域名
     <key>NSAppTransportSecurity</key>
     <dict>
     <key>NSAllowsArbitraryLoads</key>
     <true/>
     </dict>
     */
    //[UMSocialGlobal shareInstance].isUsingHttpsWhenShareContent = NO;
    
}

- (void)configUSharePlatforms{
    /*
     设置微信的appKey和appSecret
     [微信平台从U-Share 4/5升级说明]http://dev.umeng.com/social/ios/%E8%BF%9B%E9%98%B6%E6%96%87%E6%A1%A3#1_1
     */
    [[UMSocialManager defaultManager] setPlaform:UMSocialPlatformType_WechatSession appKey:@"wxb973ea38951812a4" appSecret:@"d9abb1a7646348c2f7612a0b5b48926a" redirectURL:@"http://mobile.umeng.com/social"];
    
    /* 设置分享到QQ互联的appID
     * U-Share SDK为了兼容大部分平台命名，统一用appKey和appSecret进行参数设置，而QQ平台仅需将appID作为U-Share的appKey参数传进即可。
     100424468.no permission of union id
     [QQ/QZone平台集成说明]http://dev.umeng.com/social/ios/%E8%BF%9B%E9%98%B6%E6%96%87%E6%A1%A3#1_3
     */
    [[UMSocialManager defaultManager] setPlaform:UMSocialPlatformType_QQ appKey:@"1106396131"/*设置QQ平台的appID*/  appSecret:@"9Kli6VQwRlZSQbwK" redirectURL:@"https://sns.whalecloud.com/sina2/callback"];
    
    /*
     设置新浪的appKey和appSecret
     [新浪微博集成说明]http://dev.umeng.com/social/ios/%E8%BF%9B%E9%98%B6%E6%96%87%E6%A1%A3#1_2
     */
//    [[UMSocialManager defaultManager] setPlaform:UMSocialPlatformType_Sina appKey:@"660576201"  appSecret:@"f7fea9cc5cefb7e5745ade350fd255c6" redirectURL:@"https://sns.whalecloud.com/sina2/callback"];
}

- (void)loginStateChange:(NSNotification *)notification{
    MtabBatrC *Tab =[[MtabBatrC alloc]init];
    self.window.rootViewController = Tab;
}


- (void)didUpdateUserHeading:(BMKUserLocation *)userLocation{
    
}
- (void)didUpdateBMKUserLocation:(BMKUserLocation *)userLocation{
    if (userLocation != nil) {
        NSLog(@"%f**%f",userLocation.location.coordinate.latitude,userLocation.location.coordinate.longitude);
        
        NSString *lat = [NSString stringWithFormat:@"%f",userLocation.location.coordinate.latitude];
        NSString *lon = [NSString stringWithFormat:@"%f",userLocation.location.coordinate.longitude];
        NSUserDefaults *defatls = [NSUserDefaults standardUserDefaults];
        [defatls setObject:lat forKey:@"Latitudeing"];
        [defatls setObject:lon forKey:@"Longitudeing"];
    }else{
        
    }
    
    [_locServiece stopUserLocationService];
}


- (void)playNewMessageSound
{
    NSString *path = [[NSBundle mainBundle] pathForResource:@"in" ofType:@"caf"];
    // Path for the audio file
    NSLog(@"path== %@",path);
      if (path) {
        //注册声音到系统
        AudioServicesCreateSystemSoundID((__bridge CFURLRef)[NSURL fileURLWithPath:path],&shake_sound_male_id);
         AudioServicesPlaySystemSound(shake_sound_male_id);
 
         AudioServicesPlaySystemSound(shake_sound_male_id);//如果无法再下面播放，可以尝试在此播放
    }
    
    AudioServicesPlaySystemSound(shake_sound_male_id);   //播放注册的声音，（此句代码，可以在本类中的任意位置调用，不限于本方法中）
    

 }
-(void)playVibration{
    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);   //让手机震动
}


- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
}


- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
//     程序结束 调用 通知
    
     // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
}




////监听购买结果
//- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transaction {
//    for (SKPaymentTransaction *tran in transaction) {
//        // 如果小票状态是购买完成
//        if (SKPaymentTransactionStatePurchased == tran.transactionState) {
//            // 更新界面或者数据，把用户购买得商品交给用户
//            //返回购买的商品信息
//            NSLog(@"用户信息%@",tran.payment.applicationUsername);
//            [self verifyPruchase:tran];
//            //商品购买成功可调用本地接口
//        } else if (SKPaymentTransactionStateRestored == tran.transactionState) {
//
//            // 将交易从交易队列中删除
//            [[SKPaymentQueue defaultQueue] finishTransaction:tran];
//
//
//        } else if (SKPaymentTransactionStateFailed == tran.transactionState) {
//            // 支付失败
//            //   [self showHint:@"支付失败，请重新购买"];
//            // 将交易从交易队列中删除
//            [[SKPaymentQueue defaultQueue] finishTransaction:tran];
//
//
//        }
//    }
//}
////交易结束
//- (void)completeTransaction:(SKPaymentTransaction *)transaction {
//    NSLog(@"交易结束");
//    [[SKPaymentQueue defaultQueue] finishTransaction:transaction];
//
//}
//
//// 交易失败
//- (void)failedTransaction:(SKPaymentTransaction *)transaction{
//    if (transaction.error.code == SKErrorPaymentCancelled) {
//    }else{
//
//    }
//    [[SKPaymentQueue defaultQueue]finishTransaction:transaction];
//}
//- (void)verifyPruchase:(SKPaymentTransaction *)tran{
//
//
//    // 验证凭据，获取到苹果返回的交易凭据
//    // appStoreReceiptURL iOS7.0增加的，购买交易完成后，会将凭据存放在该地址
//    NSURL *receiptURL = [[NSBundle mainBundle] appStoreReceiptURL];
//    // 从沙盒中获取到购买凭据
//    NSData *receiptData = [NSData dataWithContentsOfURL:receiptURL];
//    NSString *encodeStr = [receiptData base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed];
//
//    if (1) {
//        [[SKPaymentQueue defaultQueue] removeTransactionObserver:self];
//        [[SKPaymentQueue defaultQueue] finishTransaction:tran];
//
//    }
////    //
////    NSString *urlString = [NSString stringWithFormat:@"%@app/apple/apple_receipt",requestURL];
////    NSDictionary *dic;
////    dic = @{@"apple_receipt":encodeStr,@"type":[[NSUserDefaults standardUserDefaults] objectForKey:@"typeString"],@"pay_id": [[NSUserDefaults standardUserDefaults] objectForKey:@"order_sn"],@"pay_type":@"0"};
////    [ZJNRequestManager postWithUrlString:urlString parameters:dic success:^(id data) {
////        NSLog(@"服务器验证%@",data);
////        //  删除监听
////        [[SKPaymentQueue defaultQueue] removeTransactionObserver:self];
////        NSString *code = [NSString stringWithFormat:@"%@",data[@"code"]];
////        if ([code isEqualToString:@"200"]) {
////            [[SKPaymentQueue defaultQueue] finishTransaction:tran];
////        }
////    } failure:^(NSError *error) {
////
////        //  删除监听
////        [[SKPaymentQueue defaultQueue] removeTransactionObserver:self];
////        //        [self verifyPruchase];
////
////
////    }];
//}




- (void)applicationDidBecomeActive:(UIApplication *)application {
    [UIApplication sharedApplication].applicationIconBadgeNumber = -1;
    [UIApplication sharedApplication].applicationIconBadgeNumber = 0;
    [[UIApplication sharedApplication] cancelAllLocalNotifications];

    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}


- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}


@end
